
DAY-01: INTRO, BASIC COMMANDS

STAGES OF GIT:

1. WORKING DIRECTORY: we write the source code.
2. STAGING AREA: We can track the code. is also called as draft space.
3. REPO: we can store our tracked code. (.git is your local repo)


CREATE A SERVER
INSTALLATION:

mkdir swiggy  (mkdir is to create a folder)
cd swiggy  (cd is to go inside folder)
yum install git -y
git init  (to get .git folder)


touch file2	: create a file
git status	: to check the file is tracking or not
git add file2	: to track the file2
git commit -m "abc" file2: to store the tracked file2
git log		: to show the commits 
git log --oneline : to show the commits on single line

HISTORY:

  1  ll
    2  mkdir swiggy
    3  cd swiggy/
    4  yum install git -y
    5  ll
    6  ll -a
    7  git init
    8  ll -a
    9  vim file1
   10  ll
   11  git status
   12  git add file1
   13  git status
   14  git commit -m "commit-1" file1
   15  git status
   16  touch file2
   17  git status
   18  git add file2
   19  git status
   20  git commit -m "commit-2" file2
   21  git status
   22  ll
   23  git log
   24  git log --oneline
   25  touch file3
   26  git status
   27  git add file3
   28  git status
   29  git commit -m "commit-3" file3
   30  git log
   31  history

=================================================

DAY-02: BRANCHES, MERGE REBASE

BRANCH:
Branch means an individual line of development.
we can develop the code separately.
Each feature on the application was initially developed on an individual branch only.
the default branch is master.
we need to do initial commit for the master branch.


COMMANDS:

git branch		: to list the branches
git branch branch_name	: to create the branch
git checkout branch_name: to switch to another branch
git checkout -b branch_name: to create and switch at same time
git branch -D branch_name: to delete the branch
git branch -m old new 	: to rename a branch

MERGE: add files in one branch to another branch.

git checkout master
git merge photos

REBASE: add files in one branch to another branch.

git checkout master
git rebase photos

HISTORY:
 1  mkdir swiggy
    2  cd swiggy/
    3  yum install git -y
    4  ll -a
    5  git init
    6  ll -a
    7  git branch
    8  touch index.html
    9  git status
   10  git add index.html
   11  git commit -m "commit-1" index.html
   12  git branch
   13  git branch photos
   14  git branch
   15  git checkout photos
   16  git branch
   17  touch photos{1..5}
   18  git status
   19  git add *
   20  git commit -m "dev-1 commits" *
   21  ll
   22  git branch
   23  git branch reels
   24  git branch
   25  git checkout reels
   26  ll
   27  touhc reels{1..5}
   28  touch reels{1..5}
   29  ll
   30  git status
   31  git add *
   32  git status
   33  git commit -m "dev-2 commits" *
   34  git branch
   35  git checkout -b vcalls
   36  git branch
   37  ll
   38  touch vcalls{1..5}
   39  git add *
   40  git commit -m "dev-3 commits" *
   41  ll
   42  git branch
   43  git checkout -b promotions
   44  touch promotions{1..5}
   45  git add *
   46  git commit -m "dev-4 commits" *
   47  git branch
   48  git checkout master
   49  ll
   50  git merge photos
   51  ll
   52  git merge reels
   53  ll
   54  git rebase vcalls
   55  ll
   56  git rebase promotions
   57  ll
   58  git branch
   59  ll
   60  git branch
   61  git branch -D vcalls
   62  git branch
   63  git branch -D reels
   64  git branch
   65  git branch -m photos abc
   66  git branch
   67  git branch -m promotions def
   68  git branch
   69  ll
   70  history

========================================

DAY-03:

GITHUB:
its a place where we can store code on internet.
everyone can access the code.
daily we can do push and pull activites.


git remote add origin https://github.com/mohammedowais641/instagram.git

github removed password option in aug 2021, from then we are using tokens.
Token will be visible only once.


Settings -- > Developer Settings -- > personal access token -- > classic -- > generate tokne -- > classic -- > 



GIT PUSH: To send files from local (.git) to remote/central (GitHub)
git push origin branch_name


GIT PUSH: To receive files from central (GitHub) to local (.git)
git pull origin branch_name


HISTORY:
  1  mkdir instagram
    2  cd instagram/
    3  yum install git -y
    4  git init
    5  ll -a
    6  touch index.html
    7  git add index.html
    8  git commit -m "commit-1" index.html
    9  git branch
   10  git branch photos
   11  git branch
   12  git checkout photos
   13  git branch
   14  touch photos{1..5}
   15  git add *
   16  git commit -m "dev-1 commits" *
   17  git checkout -b reels
   18  git branch
   19  touch reels{1..5}
   20  git add *
   21  git commit -m "dev-2 commits" *
   22  ll
   23  git checkout -b vcalls
   24  git branch
   25  touch  vcalss{1..5}
   26  git add *
   27  git commit -m "dev-3 commits"
   28  git branch
   29  git checkout photos
   30  ll
   31  git checkout -b promotions
   32  ll
   33  touch promotions{1..5}
   34  git add *
   35  git commit -m "dev-4 commits"
   36  git branch
   37  git checkout master
   38  ll
   39  git merge photos
   40  git merge reels
   41  ll
   42  git rebase vcalls
   43  ll
   44  git rebase promotions
   45  ll
   46  git branch
   47  git remote add origin https://github.com/mohammedowais641/instagram.git
   48  ls -a
   49  git branch
   50  git push origin photos
   51  git push origin reels
   52  git push origin vcalls
   53  git checkout promotions
   54  ll
   55  git push origin promotions
   56  git branch
   57  ll
   58  git pull origin promotions
   59  cat index.html
   60  git pull origin promotions
   61  cat index.html
   62  history
   63 abcd
   64  xyz
===========================================================================
DAY-04:

MERGE CONFLICTS:
WHEN WE MERGE 2 DIFFERENT BRANCHES WITH COMMON FILES WITH DIFFERENT CONTENT CONFLICTS WILL OCCUR.
WE NEED TO RESOLVE THESE CONFICTS MANUALLY.



GIT CLONE: GETTING THE REPOSITORY TO LOCAL 
GIT FORK: GETTING THE REPOSITORY TO GITHUB

CLONE VS PULL
REPOSITORY: CLONE 
FILE: PULL 

FETCH VS PULL:
To get the difference in files : PULL
To show the difference in files: FETCH

git pull origin master
git fetch origin master

CHERRY-PICK:
To get specific files to one branch to another branch 


COMMANDS:
PUSH: git push origin master
PULL: git pull origin master
FETCH: git fecth 
CLONE: git clone repo_url
CHERRY-PICK: git cherry-pick commit_id

HISTORY:

